name: BlockDeploy CI

on:
  push:
    branches:
      - main # ou master, selon votre branche principale
  pull_request:
    branches:
      - main # ou master

jobs:
  build_and_lint:
    name: Build, Lint, Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x] # Utilisez la version de Node.js spécifiée dans vos prérequis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn' # Activer le cache pour Yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile # --frozen-lockfile est important pour la CI

      - name: Lint project
        run: yarn lint

      - name: Build Core SDK
        run: yarn workspace @blockdeploy/core-sdk build

      - name: Build Landing Page
        run: yarn workspace landing build
      # Ajouter ici les builds pour token-creator et launchpad si elles doivent être vérifiées en CI
      # - name: Build Token Creator dApp
      #   run: yarn workspace token-creator build
      # - name: Build Launchpad dApp
      #   run: yarn workspace launchpad build

      - name: Run Jest Tests (React Apps & SDK)
        run: yarn test --ci --coverage --silent
        env:
          CI: true

      - name: Run Hardhat Tests (Smart Contracts)
        run: yarn workspace @blockdeploy/smart-contracts test
        env:
          CI: true

      - name: Update Contract Artifacts (ABI/Bytecode)
        id: update_artifacts
        run: |
          yarn update-artifacts
          echo "SCRIPT_OUTPUT=$(git status --porcelain packages/core-sdk/src/contracts/abis/)" >> $GITHUB_OUTPUT
          # git status --porcelain affichera les fichiers modifiés. Ex: " M packages/core-sdk/src/contracts/abis/MinimalERC20.ts"
          # S'il n'y a pas de changements, la sortie sera vide.

      - name: Check for uncommitted artifact changes
        if: steps.update_artifacts.outputs.SCRIPT_OUTPUT != ''
        run: |
          echo "❌ Erreur: Les artefacts de contrat (ABI/Bytecode) ont été modifiés par 'yarn update-artifacts'."
          echo "Veuillez exécuter 'yarn update-artifacts' localement, commiter les changements et pusher à nouveau."
          echo "Fichiers modifiés :"
          echo "${{ steps.update_artifacts.outputs.SCRIPT_OUTPUT }}"
          exit 1

      # --- Déploiement sur Vercel pour apps/landing ---
      # Voir les PREREQUIS dans le job deploy_landing ci-dessous.
      # Ce job est séparé pour plus de clarté et de contrôle.

  deploy_landing:
    name: Deploy Landing Page
    needs: build_and_lint # Dépend du succès du job build_and_lint
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # PREREQUIS pour le déploiement Vercel :
      # 1. Avoir un compte Vercel et un projet Vercel créé pour l'application 'landing'.
      # 2. Configurer les secrets GitHub suivants pour votre dépôt :
      #    - VERCEL_TOKEN : Votre token d'accès Vercel.
      #    - VERCEL_ORG_ID : L'ID de votre organisation sur Vercel (utilisé comme 'scope' et pour les équipes).
      #    - VERCEL_PROJECT_ID_LANDING : L'ID du projet Vercel spécifique à 'apps/landing'.
      # 3. Configuration du projet sur Vercel (pour 'apps/landing') :
      #    - Framework Preset: Next.js
      #    - Root Directory: apps/landing  (TRÈS IMPORTANT)
      #    - Build Command: (laisser Vercel détecter ou `yarn workspace landing build`)
      #    - Install Command: (laisser Vercel détecter ou `yarn install --frozen-lockfile && yarn workspace @blockdeploy/core-sdk build`)
      #                     Assurez-vous que Vercel build le core-sdk si apps/landing en dépend pour le build.
      #                     Ou que le SDK est publié et installé comme une dépendance normale.
      #                     Alternativement, si le SDK est transpilé par Next.js (transpilePackages), seul yarn install suffit.
      #    - Variables d'environnement du projet Vercel (ex: NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID)

      - name: Deploy Landing Page to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
          vercel-args: '--prod'
          working-directory: ./apps/landing
          scope: ${{ secrets.VERCEL_ORG_ID }}
          github-comment: false

  deploy_token_creator:
    name: Deploy Token Creator dApp
    needs: build_and_lint
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') # Déclencher sur push à main/master
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # PREREQUIS pour le déploiement Vercel de Token Creator :
      # 1. Avoir un compte Vercel et un projet Vercel créé pour l'application 'token-creator'.
      # 2. Configurer les secrets GitHub suivants pour votre dépôt :
      #    - VERCEL_TOKEN : Votre token d'accès Vercel.
      #    - VERCEL_ORG_ID : L'ID de votre organisation sur Vercel.
      #    - VERCEL_PROJECT_ID_TOKEN_CREATOR : L'ID du projet Vercel spécifique à 'apps/token-creator'.
      # 3. Configuration du projet sur Vercel (pour 'apps/token-creator') :
      #    - Framework Preset: Next.js
      #    - Root Directory: apps/token-creator
      #    - Build Command: (laisser Vercel détecter ou `yarn workspace token-creator build`)
      #    - Install Command: (comme pour landing, Vercel doit pouvoir builder le SDK ou l'installer)
      #    - Variables d'environnement du projet Vercel (ex: NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID)

      - name: Deploy Token Creator to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_TOKEN_CREATOR }}
          vercel-args: '--prod' # Déploie en production. Pour Staging, Vercel utilise les Preview Deployments par défaut pour les PRs/branches.
          working-directory: ./apps/token-creator
          scope: ${{ secrets.VERCEL_ORG_ID }}
          github-comment: false

  deploy_launchpad:
    name: Deploy Launchpad dApp
    needs: build_and_lint
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') # Déclencher sur push à main/master
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # PREREQUIS pour le déploiement Vercel de Launchpad :
      # 1. Avoir un compte Vercel et un projet Vercel créé pour l'application 'launchpad'.
      # 2. Configurer les secrets GitHub suivants : VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID_LAUNCHPAD.
      # 3. Configuration du projet sur Vercel (pour 'apps/launchpad') :
      #    - Framework Preset: Next.js
      #    - Root Directory: apps/launchpad
      #    - etc. (similaire à la configuration de 'landing' et 'token-creator')

      - name: Deploy Launchpad dApp to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_LAUNCHPAD }}
          vercel-args: '--prod'
          working-directory: ./apps/launchpad
          scope: ${{ secrets.VERCEL_ORG_ID }}
          github-comment: false
