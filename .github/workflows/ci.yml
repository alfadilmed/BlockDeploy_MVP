name: BlockDeploy CI

on:
  push:
    branches:
      - main # ou master, selon votre branche principale
  pull_request:
    branches:
      - main # ou master

jobs:
  build_and_lint:
    name: Build, Lint, Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x] # Utilisez la version de Node.js spécifiée dans vos prérequis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn' # Activer le cache pour Yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile # --frozen-lockfile est important pour la CI

      - name: Lint project
        run: yarn lint

      - name: Build Core SDK
        run: yarn workspace @blockdeploy/core-sdk build

      - name: Build Landing Page
        run: yarn workspace landing build
      # Ajouter ici les builds pour token-creator et launchpad si elles doivent être vérifiées en CI
      # - name: Build Token Creator dApp
      #   run: yarn workspace token-creator build
      # - name: Build Launchpad dApp
      #   run: yarn workspace launchpad build

      - name: Run Jest Tests (React Apps & SDK)
        run: yarn test --ci --coverage --silent
        env:
          CI: true

      - name: Run Hardhat Tests (Smart Contracts)
        run: yarn workspace @blockdeploy/smart-contracts test
        env:
          CI: true # Au cas où les tests Hardhat auraient des optimisations pour CI

      # --- Déploiement sur Vercel pour apps/landing ---
      # Cette étape se déclenche uniquement sur un push vers la branche principale (ex: main).
      # PREREQUIS :
      # 1. Avoir un compte Vercel et un projet Vercel créé pour l'application 'landing'.
      # 2. Configurer les secrets GitHub suivants pour votre dépôt :
      #    - VERCEL_TOKEN : Votre token d'accès Vercel.
      #    - VERCEL_ORG_ID : L'ID de votre organisation sur Vercel (si vous en utilisez une).
      #    - VERCEL_PROJECT_ID : L'ID du projet Vercel correspondant à 'apps/landing'.
      # 3. Configuration du projet sur Vercel :
      #    - Framework Preset: Next.js
      #    - Root Directory: apps/landing  (TRÈS IMPORTANT pour les monorepos)
      #    - Build Command: `yarn build` (ou Vercel peut le détecter depuis le package.json de apps/landing)
      #    - Output Directory: Vercel détecte généralement `.next` pour Next.js.
      #    - Install Command: `yarn install --frozen-lockfile` (ou Vercel gère cela, mais s'assurer qu'il utilise Yarn)
      #    - Variables d'environnement du projet Vercel (ex: NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID)

      - name: Deploy Landing Page to Vercel
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: amondnet/vercel-action@v20 # Alternative: vercel/actions/deploy@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_LANDING }} # Utiliser un ID de projet spécifique pour la landing page
          # Vercel CLI arguments
          vercel-args: '--prod' # Déploie en production sur les domaines assignés
          # Working directory pour l'application Next.js (apps/landing)
          working-directory: ./apps/landing
          # Scope (souvent l'ID de l'organisation pour les équipes Vercel)
          scope: ${{ secrets.VERCEL_ORG_ID }}
          # alias-domains: | # Optionnel: pour assigner des domaines alias en production
          #   blockdeploy.io
          #   www.blockdeploy.io
          github-comment: false # Désactiver les commentaires automatiques de Vercel sur les PRs/commits si non souhaité
