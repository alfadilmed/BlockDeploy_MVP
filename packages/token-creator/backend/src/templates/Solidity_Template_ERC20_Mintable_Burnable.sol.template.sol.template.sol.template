```solidity
// SPDX-License-Identifier: {{LICENSE}}

pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
{{#if IS_BURNABLE}}
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
{{/if}}
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title {{TOKEN_NAME}}
 * @dev ERC20 token contract for {{TOKEN_NAME}} ({{TOKEN_SYMBOL}}).
 * Generated by BlockDeploy (Primex Software - https://primex-software.com).
 *
 * Features:
 *  - Standard ERC20
{{#if IS_MINTABLE}}
 *  - Mintable: Owner can mint new tokens.
{{/if}}
{{#if IS_BURNABLE}}
 *  - Burnable: Token holders can burn their own tokens.
{{/if}}
 *  - Ownable: Contract has an owner with administrative privileges.
 */
contract {{TOKEN_CONTRACT_NAME}} is ERC20, Ownable {{#if IS_BURNABLE}}, ERC20Burnable{{/if}} {

    /**
     * @dev Constructor that sets the token name, symbol, and initial supply.
     * The entire initial supply is minted to the contract deployer (who becomes the owner).
     */
    constructor(
        string memory tokenName,
        string memory tokenSymbol,
        uint256 initialSupply,
        address initialOwner
    ) ERC20(tokenName, tokenSymbol) Ownable(initialOwner) {
        if (initialSupply > 0) {
            _mint(initialOwner, initialSupply * (10**uint256(decimals())));
        }
    }

{{#if IS_MINTABLE}}
    /**
     * @dev Creates `amount` new tokens and assigns them to `account`.
     * Emits a {Transfer} event with `from` set to the zero address.
     * Requirements:
     * - The caller must be the owner of the contract.
     * - `account` cannot be the zero address.
     */
    function mint(address account, uint256 amount) public onlyOwner {
        require(account != address(0), "ERC20: mint to the zero address");
        _mint(account, amount);
    }
{{/if}}

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is a default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     *
     * This Sane Decimals value is set to {{DECIMALS}}.
     */
    function decimals() public pure override returns (uint8) {
        return {{DECIMALS}};
    }

    // The Ownable contract provides transferOwnership and renounceOwnership functions.
    // No need to redefine them here unless specific logic is added.

{{#if CUSTOM_FUNCTIONS}}
    // Add custom functions here if specified by the user
    // {{CUSTOM_FUNCTIONS_CODE}}
{{/if}}
}

// Considerations for BlockDeploy generation:
// 1. {{LICENSE}}: SPDX License Identifier (e.g., MIT, Unlicensed). Default to MIT.
// 2. {{TOKEN_NAME}}: Name of the token (e.g., "My Token").
// 3. {{TOKEN_SYMBOL}}: Symbol of the token (e.g., "MTK").
// 4. {{TOKEN_CONTRACT_NAME}}: Contract name, usually derived from Token Name (e.g., MyToken).
// 5. {{INITIAL_SUPPLY}}: The total initial supply of tokens. The constructor will handle `* (10**decimals())`.
// 6. {{DECIMALS}}: Number of decimal places for the token (uint8).
// 7. {{OWNER_ADDRESS}}: The address that will be set as the owner upon deployment. Typically msg.sender of deployment transaction.
// 8. {{#if IS_MINTABLE}} ... {{/if}}: Conditional block for mintable functionality.
//    - If true, `import "@openzeppelin/contracts/access/Ownable.sol";` is needed for onlyOwner modifier.
//    - The `mint` function is included.
// 9. {{#if IS_BURNABLE}} ... {{/if}}: Conditional block for burnable functionality.
//    - If true, `import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";` is needed.
//    - The contract inherits from `ERC20Burnable`.
// 10. {{#if IS_PAUSABLE}} ... {{/if}}: (Future feature) Conditional block for pausable functionality.
//     - Would require `ERC20Pausable` and overriding `_beforeTokenTransfer`.
// 11. {{#if HAS_TAXES}} ... {{/if}}: (Future feature) Conditional block for tax features.
//     - Would require overriding `_transfer` or `_beforeTokenTransfer`.
// 12. {{CUSTOM_FUNCTIONS_CODE}}: Placeholder for any advanced custom functions user might define. (Future feature)
//
// Default Owner: The `constructor` in this template sets `msg.sender` (the deployer) as the initial owner via Ownable's constructor.
// The `initialOwner` parameter in the constructor is used to explicitly set the owner, which is useful if the deployment is done by a factory or a script.
// For BlockDeploy, the backend should pass the address of the user initiating the deployment as `initialOwner`.
```
