```solidity
// SPDX-License-Identifier: {{LICENSE}}

pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";
import "@openzeppelin/contracts/access/Ownable.sol"; // Optional: if owner needs minting capability beyond initial

/**
 * @title {{TOKEN_NAME}} (Governance Token)
 * @dev ERC20 token with voting capabilities (ERC20Votes) for DAO governance.
 * Generated by BlockDeploy (Primex Software - https://primex-software.com).
 *
 * Features:
 *  - ERC20 standard token.
 *  - ERC20Burnable: Allows token holders to burn their tokens.
 *  - ERC20Votes: Enables snapshotting and delegation for on-chain voting.
 *  - {{#if IS_MINTABLE_BY_OWNER}}Ownable: Allows a designated owner (e.g., DAO Treasury or multisig) to mint new tokens.{{/if}}
 *  - Initial supply minted to a specified recipient (e.g., DAO creator or treasury).
 */
contract {{TOKEN_CONTRACT_NAME}} is ERC20, ERC20Burnable, ERC20Votes {{#if IS_MINTABLE_BY_OWNER}}, Ownable{{/if}} {

    /**
     * @dev Constructor that sets the token name, symbol, and initial supply.
     * The entire initial supply is minted to the `initialSupplyRecipient`.
     * The deployer of this contract becomes the initial `owner` if Ownable is inherited.
     * @param tokenName_ Name of the governance token.
     * @param tokenSymbol_ Symbol of the governance token.
     * @param initialSupply_ Total initial supply of tokens (in token's smallest unit).
     * @param initialSupplyRecipient_ Address to receive the initial supply.
     * @param initialOwner_ Address to be the owner (if IS_MINTABLE_BY_OWNER is true).
     */
    constructor(
        string memory tokenName_,
        string memory tokenSymbol_,
        uint256 initialSupply_,
        address initialSupplyRecipient_
        {{#if IS_MINTABLE_BY_OWNER}}
        , address initialOwner_
        {{/if}}
    ) 
    ERC20(tokenName_, tokenSymbol_)
    {{#if IS_MINTABLE_BY_OWNER}}
    Ownable(initialOwner_)
    {{/if}}
    ERC20Votes(tokenName_, tokenSymbol_) // ERC20Votes constructor requires name and symbol again
    {
        require(initialSupplyRecipient_ != address(0), "ERC20: mint to the zero address");
        if (initialSupply_ > 0) {
            _mint(initialSupplyRecipient_, initialSupply_);
        }
    }

{{#if IS_MINTABLE_BY_OWNER}}
    /**
     * @dev Creates `amount` new tokens and assigns them to `account`.
     * Emits a {Transfer} event with `from` set to the zero address.
     * Requirements:
     * - The caller must be the owner of the contract.
     * - `account` cannot be the zero address.
     * This function is available only if IS_MINTABLE_BY_OWNER is true.
     */
    function mint(address account, uint256 amount) public onlyOwner {
        require(account != address(0), "ERC20: mint to the zero address");
        _mint(account, amount);
    }
{{/if}}

    // Overrides for ERC20Votes compatibility
    // The following functions are overrides required by Solidity.

    function _afterTokenTransfer(address from, address to, uint256 amount)
        internal
        virtual
        override(ERC20, ERC20Votes)
    {
        super._afterTokenTransfer(from, to, amount);
    }

    function _mint(address to, uint256 amount)
        internal
        virtual
        override(ERC20, ERC20Votes)
    {
        super._mint(to, amount);
    }

    function _burn(address account, uint256 amount)
        internal
        virtual
        override(ERC20Burnable, ERC20Votes) // ERC20Burnable also overrides _burn
    {
        super._burn(account, amount);
    }

    /**
     * @dev Decimals are part of ERC20 standard, ERC20Votes does not change this.
     * Default is 18. BlockDeploy can make this configurable if needed.
     */
    // function decimals() public view virtual override returns (uint8) {
    //     return {{DECIMALS}}; // Default 18, or make {{DECIMALS}} a placeholder
    // }
}

// BlockDeploy Generation Placeholders:
// 1.  {{LICENSE}}: SPDX License Identifier (e.g., MIT).
// 2.  {{TOKEN_NAME}}: Name of the token (e.g., "My DAO Token").
// 3.  {{TOKEN_SYMBOL}}: Symbol of the token (e.g., "MDT").
// 4.  {{TOKEN_CONTRACT_NAME}}: Solidity contract name, derived from Token Name (e.g., MyDAOToken).
// 5.  {{INITIAL_SUPPLY_SMALLEST_UNIT}}: Initial supply in token's smallest denomination.
// 6.  {{INITIAL_SUPPLY_RECIPIENT_ADDRESS}}: Address to receive the initial supply.
// 7.  {{IS_MINTABLE_BY_OWNER}}: Boolean. If true, includes Ownable and a public mint function restricted to owner.
// 8.  {{INITIAL_OWNER_ADDRESS}}: Required if IS_MINTABLE_BY_OWNER is true. This address becomes the contract owner.
//     Could be the DAO creator, a multisig, or the DAO's Treasury/Timelock contract once deployed.
// 9.  {{DECIMALS}}: (Optional) Number of decimals, defaults to 18 if not specified or if this function override is removed.
//
// Notes for BlockDeploy implementation:
// - ERC20Votes requires the token name and symbol to be passed to its constructor as well.
// - The `_afterTokenTransfer`, `_mint`, and `_burn` functions are overridden to correctly update vote checkpoints.
// - If `IS_MINTABLE_BY_OWNER` is true, the `Ownable` contract is inherited, and an `initialOwner_` parameter is added to the constructor.
//   The `mint` function is then available and guarded by `onlyOwner`.
// - `ERC20Burnable` is included by default, allowing any holder to burn their tokens.
//   If burning should be restricted (e.g., only by owner or a specific role), this would require customization.
// - The `decimals()` function is standard from ERC20. OpenZeppelin's ERC20 default is 18. If BlockDeploy wants this
//   to be configurable, the commented-out `decimals()` override can be used with a `{{DECIMALS}}` placeholder.
```
