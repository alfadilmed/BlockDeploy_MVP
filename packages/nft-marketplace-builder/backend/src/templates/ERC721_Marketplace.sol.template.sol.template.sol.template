```solidity
// SPDX-License-Identifier: {{LICENSE}}

pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";

/**
 * @title {{COLLECTION_NAME}} (ERC721 NFT Collection)
 * @dev ERC721 token contract for the {{COLLECTION_NAME}} ({{COLLECTION_SYMBOL}}) collection.
 * Generated by BlockDeploy (Primex Software - https://primex-software.com).
 *
 * Features:
 *  - ERC721 Standard with enumeration and URI storage.
 *  - Ownable: Contract has an owner with administrative privileges for minting.
 *  - ERC2981: Royalty standard for secondary sales, configured at deployment.
 *  - Sequential Token IDs.
 */
contract {{COLLECTION_CONTRACT_NAME}} is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable, IERC2981 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;

    address private _royaltyRecipient;
    uint96 private _royaltyFraction; // Basis points, e.g., 500 for 5%

    /**
     * @dev Constructor that sets the collection name, symbol, owner,
     *      and royalty information.
     * @param collectionName_ Name of the NFT collection.
     * @param collectionSymbol_ Symbol of the NFT collection.
     * @param initialOwner_ Address that will own this contract and can mint.
     * @param royaltyRecipient_ Address to receive royalty payments.
     * @param royaltyPercentage_ Royalty percentage in basis points (e.g., 500 for 5%). Max 10000 (100%).
     */
    constructor(
        string memory collectionName_,
        string memory collectionSymbol_,
        address initialOwner_,
        address royaltyRecipient_,
        uint96 royaltyPercentage_
    ) ERC721(collectionName_, collectionSymbol_) Ownable(initialOwner_) {
        require(royaltyRecipient_ != address(0), "ERC2981: Recipient is zero address");
        require(royaltyPercentage_ <= 10000, "ERC2981: Royalty percentage too high"); // Max 100%
        _royaltyRecipient = royaltyRecipient_;
        _royaltyFraction = royaltyPercentage_;
    }

    /**
     * @dev Mints a new token with the given URI and assigns it to `to`.
     * Token ID is auto-incremented.
     * Emits a {Transfer} event.
     * Requirements:
     * - The caller must be the owner of the contract.
     * - `to` cannot be the zero address.
     * @param to The address to mint the NFT to.
     * @param tokenURI_ The URI for the token's metadata.
     * @return The ID of the minted token.
     */
    function safeMint(address to, string memory tokenURI_) public onlyOwner returns (uint256) {
        require(to != address(0), "ERC721: mint to the zero address");
        
        _tokenIdCounter.increment();
        uint256 newTokenId = _tokenIdCounter.current();
        
        _safeMint(to, newTokenId);
        _setTokenURI(newTokenId, tokenURI_);
        
        return newTokenId;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable, IERC165) returns (bool) {
        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC2981-royaltyInfo}.
     * Calculates royalty information for a given token ID and sale price.
     * @param tokenId The ID of the token being sold (unused in this version as royalty is collection-wide).
     * @param salePrice The price the token is being sold for.
     * @return receiver The address that should receive royalties.
     * @return royaltyAmount The royalty amount calculated for the sale price.
     */
    function royaltyInfo(
        uint256 tokenId,
        uint256 salePrice
    ) public view virtual override returns (address receiver, uint256 royaltyAmount) {
        // tokenId is unused in this basic implementation, royalty is per-collection.
        // Advanced implementations could have per-token royalties.
        (this); // Suppress unused variable warning for tokenId if not used.
        
        receiver = _royaltyRecipient;
        royaltyAmount = (salePrice * _royaltyFraction) / 10000;
        return (receiver, royaltyAmount);
    }
    
    /**
     * @dev Sets the royalty information for the entire collection.
     * Only callable by the contract owner.
     * @param royaltyRecipient_ New address to receive royalty payments.
     * @param royaltyPercentage_ New royalty percentage in basis points.
     */
    function setRoyaltyInfo(address royaltyRecipient_, uint96 royaltyPercentage_) public onlyOwner {
        require(royaltyRecipient_ != address(0), "ERC2981: Recipient is zero address");
        require(royaltyPercentage_ <= 10000, "ERC2981: Royalty percentage too high");
        _royaltyRecipient = royaltyRecipient_;
        _royaltyFraction = royaltyPercentage_;
    }

    // The following functions are overrides required by Solidity.
    function _increaseBalance(address account, uint128 amount) internal virtual override(ERC721, ERC721Enumerable) {
        super._increaseBalance(account, amount);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        // If you have a base URI for all tokens, return it here.
        // Otherwise, tokenURI must be set for each token individually.
        // For BlockDeploy, individual tokenURIs are more flexible.
        return ""; 
    }

    /**
     * @dev See {ERC721URIStorage-_setTokenURI}.
     * Publicly accessible version to update token URI if needed by owner.
     */
    function setTokenURI(uint256 tokenId, string memory tokenURI_) public onlyOwner {
        _setTokenURI(tokenId, tokenURI_);
    }

    /**
     * @dev See {ERC721-_burn}.
     * This override is needed because ERC721URIStorage also overrides it.
     */
    function _burn(uint256 tokenId) internal virtual override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }
    
    // Ownable's transferOwnership and renounceOwnership are inherited.
}

// BlockDeploy Generation Placeholders:
// 1. {{LICENSE}}: SPDX License Identifier (e.g., MIT).
// 2. {{COLLECTION_NAME}}: Name of the NFT collection (e.g., "My Awesome Collection").
// 3. {{COLLECTION_SYMBOL}}: Symbol for the collection (e.g., "MAC").
// 4. {{COLLECTION_CONTRACT_NAME}}: Solidity contract name, derived from COLLECTION_NAME (e.g., MyAwesomeCollection).
// 5. {{INITIAL_OWNER_ADDRESS}}: Address of the user deploying this collection contract.
// 6. {{ROYALTY_RECIPIENT_ADDRESS}}: Address to receive royalty fees.
// 7. {{ROYALTY_PERCENTAGE_BPS}}: Royalty fee in basis points (e.g., 500 for 5%).
//
// Notes for BlockDeploy implementation:
// - The `safeMint` function is owner-only. BlockDeploy frontend will need an interface for the owner to mint NFTs.
// - `tokenURI_` in `safeMint` should point to a JSON metadata file conforming to ERC721 metadata standards.
//   BlockDeploy might offer an IPFS uploader or allow users to input existing URIs.
// - `_baseURI()` is empty, meaning each token needs its full URI set. This is generally more flexible.
// - `setRoyaltyInfo` allows the owner to update royalty settings post-deployment.
// - `setTokenURI` allows the owner to update a token's URI post-mint.
```
